
import { useState } from "react";
import { Edit, Trash2 } from "lucide-react";

function Gender() {
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);

  const [genders, setGenders] = useState([
    { id: 1, name: "Ayub Salas", title: "Designer", company: "Carroll Group", role: "Member", username: "salas_a" },
    { id: 2, name: "Agnes Sherman", title: "Developer", company: "Apple", role: "Admin", username: "shermanagnes" },
    { id: 3, name: "Jemma Cummings", title: "Senior Designer", company: "20goto10", role: "Member", username: "jemmaC" },
    { id: 4, name: "Jimi Cardenas", title: "Copywriter", company: "Wind-UI", role: "Owner", username: "cardenasji" },
    { id: 5, name: "Mateusz Tucker", title: "Project Manager", company: "Tailwindui", role: "Member", username: "mt" },
    { id: 6, name: "Lisa Black", title: "UX Lead", company: "Designify", role: "Admin", username: "lbl" },
    { id: 7, name: "John Doe", title: "Backend Dev", company: "CodeLab", role: "Member", username: "johndoe" },
    { id: 8, name: "Jane Smith", title: "QA Engineer", company: "Testers Inc.", role: "Member", username: "jsmith" },
    { id: 9, name: "Mark Wayne", title: "Data Analyst", company: "Insights", role: "Admin", username: "markw" },
    { id: 10, name: "Ella James", title: "Scrum Master", company: "AgileX", role: "Member", username: "ejames" },
    { id: 11, name: "Sarah Lee", title: "UI Designer", company: "Creatives", role: "Member", username: "slee" },
    { id: 12, name: "Tom Hardy", title: "Support Engineer", company: "HelpDesk", role: "Member", username: "thardy" },
    { id: 13, name: "Emma Watson", title: "Product Owner", company: "TechCorp", role: "Owner", username: "ewatson" },
    { id: 14, name: "Chris Evans", title: "Team Lead", company: "DevCo", role: "Admin", username: "cevans" },
    { id: 15, name: "Sam Wilson", title: "Intern", company: "NewTech", role: "Member", username: "swilson" },
  ]);

  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    title: "",
    company: "",
    role: "",
    username: "",
  });
  const [errors, setErrors] = useState({});
  const [editId, setEditId] = useState(null);

  // Filter and Pagination logic
  const filteredData = genders.filter((item) =>
    item.name.toLowerCase().includes(search.toLowerCase())
  );

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentData = filteredData.slice(startIndex, startIndex + itemsPerPage);

  // Delete item
  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this record?")) {
      setGenders((prev) => prev.filter((g) => g.id !== id));
      if ((currentPage - 1) * itemsPerPage >= filteredData.length - 1) {
        setCurrentPage((prev) => Math.max(prev - 1, 1));
      }
    }
  };

  // Open modal for create
  const openCreateForm = () => {
    setEditId(null);
    setFormData({ name: "", title: "", company: "", role: "", username: "" });
    setErrors({});
    setShowForm(true);
  };

  // Open modal for edit
  const openEditForm = (id) => {
    const gender = genders.find((g) => g.id === id);
    if (!gender) return;
    setEditId(id);
    setFormData({
      name: gender.name,
      title: gender.title,
      company: gender.company,
      role: gender.role,
      username: gender.username,
    });
    setErrors({});
    setShowForm(true);
  };

  // Create or update handler
  const handleSave = () => {
    const requiredFields = ["name", "title", "company", "role", "username"];
    const newErrors = {};

    for (const field of requiredFields) {
      if (!formData[field].trim()) {
        newErrors[field] = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
      }
    }

    setErrors(newErrors);
    if (Object.keys(newErrors).length > 0) return;

    if (editId !== null) {
      // Update
      setGenders((prev) =>
        prev.map((g) => (g.id === editId ? { id: editId, ...formData } : g))
      );
    } else {
      // Create
      const newId = genders.length ? Math.max(...genders.map((g) => g.id)) + 1 : 1;
      setGenders([...genders, { id: newId, ...formData }]);
    }

    setFormData({ name: "", title: "", company: "", role: "", username: "" });
    setErrors({});
    setShowForm(false);
    setEditId(null);
  };

  // Pagination controls
  const goToPage = (page) => {
    if (page < 1 || page > totalPages) return;
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (e) => {
    setItemsPerPage(parseInt(e.target.value));
    setCurrentPage(1);
  };

  // Close modal on overlay click
  const closeModal = (e) => {
    if (e.target.id === "modalOverlay") {
      setShowForm(false);
      setFormData({ name: "", title: "", company: "", role: "", username: "" });
      setErrors({});
      setEditId(null);
    }
  };

  return (
    <>
      <p className="text-sm mb-4">/ genders</p>
      <div className="p-4 bg-white shadow rounded-lg">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-4">
          <button
            onClick={openCreateForm}
            className="px-5 py-2 bg-cyan-600 text-white rounded-lg hover:bg-cyan-700
                     focus:outline-none focus:ring-2 focus:ring-cyan-500 transition"
          >
            Create
          </button>

          <div className="flex flex-wrap items-center gap-3 justify-end w-full md:w-auto">
            <input
              type="text"
              placeholder="Search by name..."
              value={search}
              onChange={(e) => {
                setSearch(e.target.value);
                setCurrentPage(1);
              }}
              className="px-3 py-1.5 border border-cyan-300 rounded focus:ring-2 focus:ring-cyan-500 text-sm w-full md:w-64"
            />
            <div className="flex items-center gap-1">
              <label className="text-sm text-gray-600">Show</label>
              <select
                value={itemsPerPage}
                onChange={handleItemsPerPageChange}
                className="border border-cyan-300 rounded px-2 py-1 text-sm focus:ring-2 focus:ring-cyan-500"
              >
                {[10, 20, 30, 40, 50].map((count) => (
                  <option key={count} value={count}>
                    {count}
                  </option>
                ))}
              </select>
              <span className="text-sm text-gray-600">items</span>
            </div>
          </div>
        </div>

        {showForm && (
          <div
            id="modalOverlay"
            onClick={closeModal}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity"
          >
            <div
              className="bg-white p-6 rounded-xl border border-cyan-200 w-full max-w-md shadow-lg relative
                         flex flex-col"
              onClick={(e) => e.stopPropagation()} // prevent modal close on inside click
            >
              {/* Close button */}
              <button
                onClick={() => {
                  setShowForm(false);
                  setFormData({ name: "", title: "", company: "", role: "", username: "" });
                  setErrors({});
                  setEditId(null);
                }}
                className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none"
                aria-label="Close modal"
              >
                &#x2715;
              </button>

              {/* Modal Header */}
              <h2 className="text-xl font-semibold mb-5 border-b border-cyan-300 pb-2 text-cyan-700">
                {editId !== null ? "Update Gender" : "Create New Gender"}
              </h2>

              {/* Form Fields */}
              <div className="grid md:grid-cols-2 gap-5 mb-6">
                {["name", "title", "company", "role", "username"].map((field) => (
                  <div key={field} className="flex flex-col">
                    <label
                      htmlFor={field}
                      className="text-sm font-medium text-gray-700 capitalize mb-1"
                    >
                      {field}
                    </label>
                    <input
                      id={field}
                      type="text"
                      value={formData[field]}
                      onChange={(e) => {
                        setFormData({ ...formData, [field]: e.target.value });
                        setErrors({ ...errors, [field]: undefined });
                      }}
                      placeholder={`Enter ${field}`}
                      className={`mt-1 px-4 py-2 border rounded-lg text-sm transition
                        focus:outline-none focus:ring-2 focus:ring-cyan-500
                        ${
                          errors[field]
                            ? "border-red-500 focus:ring-red-500"
                            : "border-gray-300 focus:border-cyan-500"
                        }`}
                      autoFocus={field === "name"}
                    />
                    {errors[field] && (
                      <p className="text-red-600 text-xs mt-1 italic">{errors[field]}</p>
                    )}
                  </div>
                ))}
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end gap-3">
                <button
                  onClick={handleSave}
                  className="px-5 py-2 bg-cyan-600 text-white rounded-lg hover:bg-cyan-700
                             focus:outline-none focus:ring-2 focus:ring-cyan-500 transition"
                >
                  {editId !== null ? "Update" : "Save"}
                </button>
                <button
                  onClick={() => {
                    setShowForm(false);
                    setFormData({ name: "", title: "", company: "", role: "", username: "" });
                    setErrors({});
                    setEditId(null);
                  }}
                  className="px-5 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300
                             focus:outline-none focus:ring-2 focus:ring-gray-400 transition"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Table */}
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs border border-cyan-600 rounded overflow-hidden">
            <thead className="bg-cyan-600 text-white">
              <tr>
                <th className="px-3 py-2 text-left font-medium">No</th>
                <th className="px-4 py-2 text-left font-medium">Name</th>
                <th className="px-4 py-2 text-left font-medium">Title</th>
                <th className="px-4 py-2 text-left font-medium">Company</th>
                <th className="px-4 py-2 text-left font-medium">Role</th>
                <th className="px-4 py-2 text-left font-medium">Username</th>
                <th className="px-4 py-2 text-center font-medium">Actions</th>
              </tr>
            </thead>
            <tbody className="text-slate-700">
              {currentData.length > 0 ? (
                currentData.map((g, i) => (
                  <tr
                    key={`${g.id}-${startIndex + i}`}
                    className="border-b last:border-none odd:bg-white even:bg-cyan-50 hover:bg-cyan-100 transition"
                  >
                    <td className="px-3 py-2">{startIndex + i + 1}</td>
                    <td className="px-4 py-2">{g.name}</td>
                    <td className="px-4 py-2">{g.title}</td>
                    <td className="px-4 py-2">{g.company}</td>
                    <td className="px-4 py-2">{g.role}</td>
                    <td className="px-4 py-2">{g.username}</td>
                    <td className="px-4 py-2 text-center space-x-2">
                      <button
                        title="Update"
                        onClick={() => openEditForm(g.id)}
                        className="text-cyan-700 hover:text-cyan-900 transition"
                      >
                        <Edit size={16} />
                      </button>
                      <button
                        title="Delete"
                        onClick={() => handleDelete(g.id)}
                        className="text-red-600 hover:text-red-800 transition"
                      >
                        <Trash2 size={16} />
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="7" className="px-4 py-4 text-center text-gray-500">
                    No matching results.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="flex justify-center items-center mt-4 space-x-2 text-sm">
          <button
            onClick={() => goToPage(currentPage - 1)}
            disabled={currentPage === 1}
            className={`px-3 py-1 rounded border ${
              currentPage === 1
                ? "border-gray-300 text-gray-300 cursor-not-allowed"
                : "border-cyan-600 text-cyan-600 hover:bg-cyan-100"
            }`}
          >
            Prev
          </button>

          {[...Array(totalPages)].map((_, idx) => (
            <button
              key={idx}
              onClick={() => goToPage(idx + 1)}
              className={`px-3 py-1 rounded border ${
                currentPage === idx + 1
                  ? "bg-cyan-600 text-white border-cyan-600"
                  : "border-cyan-600 text-cyan-600 hover:bg-cyan-100"
              }`}
            >
              {idx + 1}
            </button>
          ))}

          <button
            onClick={() => goToPage(currentPage + 1)}
            disabled={currentPage === totalPages}
            className={`px-3 py-1 rounded border ${
              currentPage === totalPages
                ? "border-gray-300 text-gray-300 cursor-not-allowed"
                : "border-cyan-600 text-cyan-600 hover:bg-cyan-100"
            }`}
          >
            Next
          </button>
        </div>
      </div>
    </>
  );
}

export default Gender;

